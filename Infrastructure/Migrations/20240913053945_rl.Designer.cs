// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240913053945_rl")]
    partial class rl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AttributeCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ACDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ACDate");

                    b.Property<string>("BottleDateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWeightRange")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductionOrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("adm_AttributeCheckHeader", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AttributeCheckDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CapTorque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoneByUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoneByUserNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmptyBottleWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoodCondition")
                        .HasColumnType("bit");

                    b.Property<int>("LeakTest")
                        .HasColumnType("int");

                    b.Property<string>("LotNoOfLiquid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("adm_AttributeCheckDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CauseMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CauseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DowntimeTrackingId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DowntimeTrackingId");

                    b.ToTable("adm_CauseMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("adm_CompanyMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DowntimeTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductLineId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ProductionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SAPProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftMasterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductLineId");

                    b.HasIndex("SAPProductionOrderId");

                    b.HasIndex("ShiftMasterId");

                    b.ToTable("adm_DowntimeTracking", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DowntimeTrackingDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoneByUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoneByUserNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Durations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("adm_DowntimeTrackingDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AnalysisDoneByIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchLotNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompounderUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SAPProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SampleReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleTestedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<string>("StandardBatchWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TestingDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SAPProductionOrderId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TankId");

                    b.ToTable("adm_LiquidPreparation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationAdjustmentDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Adjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LiquidPreparationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LiquidPreparationInstructionDetailsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LiquidPreparationInstructionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LiquidPreparationId");

                    b.HasIndex("LiquidPreparationInstructionDetailsId");

                    b.HasIndex("MaterialId");

                    b.ToTable("adm_LiquidPreparationAdjustmentDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationChecklistDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LiquidPreparationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StartEndBatchChecklistId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TankId")
                        .HasColumnType("bigint");

                    b.Property<string>("TankNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LiquidPreparationId");

                    b.HasIndex("StartEndBatchChecklistId");

                    b.HasIndex("TankId");

                    b.ToTable("adm_LiquidPreparationChecklistDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationInstructionDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoneByIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("InstructionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LiquidPreparationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LotNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WeightAdded")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.HasIndex("LiquidPreparationId");

                    b.HasIndex("MaterialId");

                    b.ToTable("adm_LiquidPreparationInstructionDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationSpecificationDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AnalysisDoneByIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LiquidPreparationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleTestedTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SpecificationLimitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Test1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TestingDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LiquidPreparationId");

                    b.HasIndex("SpecificationLimitId");

                    b.ToTable("adm_LiquidPreparationSpecificationDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MaterialMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_MaterialMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.NozzelMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NozzelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NozzelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_NozzelMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PalletPacking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FinishedCasesOnIncompletePalletAtEnd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinishedCasesOnIncompletePalletAtStart")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PackingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SAPProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SupervisedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalCasesProduced")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SAPProductionOrderId");

                    b.HasIndex("SupervisedBy");

                    b.ToTable("adm_PalletPackingHeader", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PalletPackingDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoneByIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PalletNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("adm_PalletPackingDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PermissionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("adm_Permission", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PostCheckListDetailEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostCheckListId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrePostQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostCheckListId");

                    b.HasIndex("PrePostQuestionId");

                    b.ToTable("adm_PostCheckListDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PostCheckListEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FillerUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FillingLine")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PrePostQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FillingLine");

                    b.HasIndex("PrePostQuestionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("ShiftId");

                    b.ToTable("adm_PostCheckList", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PreCheckListDetailEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PreCheckListId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrePostQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PreCheckListId");

                    b.HasIndex("PrePostQuestionId");

                    b.ToTable("adm_PreCheckListDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PreCheckListEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FillerUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FillingLine")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PrePostQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FillingLine");

                    b.HasIndex("PrePostQuestionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("ShiftId");

                    b.ToTable("adm_PreCheckList", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PrePostQuestionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostCheckListEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PreCheckListEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostCheckListEntityId");

                    b.HasIndex("PreCheckListEntityId");

                    b.ToTable("adm_PrePostQuestion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductInstructionDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductMasterId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductMasterId");

                    b.ToTable("adm_ProductInstructionDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_ProductMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductionOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InventoryUOM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PODate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PlannedQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_ProductionOrder", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QCTSpecificationMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HighValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LowValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_QCTSpecificationMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RolePermissionMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasMasterAccess")
                        .HasColumnType("bit");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("adm_RolePermissionMap", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ShiftMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_ShiftMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StartEndBatchChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_StartEndBatchChecklist", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TankMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TankName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_TankMaster", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TrailerInspection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComingOrderFromForeignAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComingOrderFromForeignNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoorCloseProperlyAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoorCloseProperlyNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FloorInGoodConditionAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FloorInGoodConditionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("InspectedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsRustPresentAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsRustPresentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlateNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OverallIntegrityAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallIntegrityNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentOnTrailerAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentOnTrailerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafeWorkingOrderAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafeWorkingOrderNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemperatureSettingUsedAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemperatureSettingUsedNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOfInspection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleCleanAns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleCleanNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VehicleTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("adm_TrailerInspection", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TrailerLoading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BOLNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoorNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SupervisedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SupervisedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TLDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("SupervisedBy");

                    b.ToTable("adm_TrailerLoadingHeader", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TrailerLoadingDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActionTakenBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PalletQty")
                        .HasColumnType("int");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductionOrder")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.HasIndex("ProductionOrder");

                    b.ToTable("adm_TrailerLoadingDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WeightCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BottleDateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxWeightRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinWeightRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QAUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SAPProductionOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SAPProductionOrderId");

                    b.HasIndex("ShiftId");

                    b.ToTable("adm_WeightCheckHeader", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WeightCheckDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AvgWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoneByUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoneByUserNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("adm_WeightCheckDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WeightCheckSubDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DetailId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NozzleId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("NozzleId");

                    b.ToTable("adm_WeightCheckSubDetails", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Skyward.Model.MastersEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("adm_Masters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AttributeCheck", b =>
                {
                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("AttributeCheck")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("AttributeCheck")
                        .HasForeignKey("ProductionOrderId");

                    b.Navigation("ProductMaster");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("Domain.Entities.AttributeCheckDetails", b =>
                {
                    b.HasOne("Domain.Entities.AttributeCheck", "AttributeCheck")
                        .WithMany("AttributeCheckDetails")
                        .HasForeignKey("HeaderId");

                    b.Navigation("AttributeCheck");
                });

            modelBuilder.Entity("Domain.Entities.CauseMaster", b =>
                {
                    b.HasOne("Domain.Entities.DowntimeTracking", null)
                        .WithMany("CauseMaster")
                        .HasForeignKey("DowntimeTrackingId");
                });

            modelBuilder.Entity("Domain.Entities.DowntimeTracking", b =>
                {
                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("DowntimeTracking")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skyward.Model.MastersEntity", "Masters")
                        .WithMany("DowntimeTracking")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("DowntimeTracking")
                        .HasForeignKey("SAPProductionOrderId");

                    b.HasOne("Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany()
                        .HasForeignKey("ShiftMasterId");

                    b.Navigation("Masters");

                    b.Navigation("ProductMaster");

                    b.Navigation("ProductionOrder");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("Domain.Entities.DowntimeTrackingDetails", b =>
                {
                    b.HasOne("Domain.Entities.DowntimeTracking", "DowntimeTracking")
                        .WithMany("DownTimeTrackingDetails")
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DowntimeTracking");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparation", b =>
                {
                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("LiquidPreparation")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("LiquidPreparation")
                        .HasForeignKey("SAPProductionOrderId");

                    b.HasOne("Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany("LiquidPreparation")
                        .HasForeignKey("ShiftId");

                    b.HasOne("Domain.Entities.TankMaster", "TankMaster")
                        .WithMany("LiquidPreparation")
                        .HasForeignKey("TankId");

                    b.Navigation("ProductMaster");

                    b.Navigation("ProductionOrder");

                    b.Navigation("ShiftMaster");

                    b.Navigation("TankMaster");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationAdjustmentDetails", b =>
                {
                    b.HasOne("Domain.Entities.LiquidPreparation", "LiquidPreparation")
                        .WithMany("LiquidPreparationAdjustmentDetails")
                        .HasForeignKey("LiquidPreparationId");

                    b.HasOne("Domain.Entities.LiquidPreparationInstructionDetails", "LiquidPreparationInstructionDetails")
                        .WithMany("LiquidPreparationAdjustmentDetails")
                        .HasForeignKey("LiquidPreparationInstructionDetailsId");

                    b.HasOne("Domain.Entities.MaterialMaster", "MaterialMaster")
                        .WithMany("LiquidPreparationAdjustmentDetails")
                        .HasForeignKey("MaterialId");

                    b.Navigation("LiquidPreparation");

                    b.Navigation("LiquidPreparationInstructionDetails");

                    b.Navigation("MaterialMaster");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationChecklistDetails", b =>
                {
                    b.HasOne("Domain.Entities.LiquidPreparation", "LiquidPreparation")
                        .WithMany("LiquidPreparationChecklistDetails")
                        .HasForeignKey("LiquidPreparationId");

                    b.HasOne("Domain.Entities.StartEndBatchChecklist", "StartEndBatchChecklist")
                        .WithMany("LiquidPreparationChecklistDetails")
                        .HasForeignKey("StartEndBatchChecklistId");

                    b.HasOne("Domain.Entities.TankMaster", "TankMaster")
                        .WithMany("LiquidPreparationChecklistDetails")
                        .HasForeignKey("TankId");

                    b.Navigation("LiquidPreparation");

                    b.Navigation("StartEndBatchChecklist");

                    b.Navigation("TankMaster");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationInstructionDetails", b =>
                {
                    b.HasOne("Domain.Entities.ProductInstructionDetails", "ProductInstructionDetails")
                        .WithMany("LiquidPreparationInstructionDetails")
                        .HasForeignKey("InstructionId");

                    b.HasOne("Domain.Entities.LiquidPreparation", "LiquidPreparation")
                        .WithMany("LiquidPreparationInstructionDetails")
                        .HasForeignKey("LiquidPreparationId");

                    b.HasOne("Domain.Entities.MaterialMaster", "MaterialMaster")
                        .WithMany("LiquidPreparationInstructionDetails")
                        .HasForeignKey("MaterialId");

                    b.Navigation("LiquidPreparation");

                    b.Navigation("MaterialMaster");

                    b.Navigation("ProductInstructionDetails");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationSpecificationDetails", b =>
                {
                    b.HasOne("Domain.Entities.LiquidPreparation", "LiquidPreparation")
                        .WithMany("LiquidPreparationSpecificationDetails")
                        .HasForeignKey("LiquidPreparationId");

                    b.HasOne("Domain.Entities.QCTSpecificationMaster", "QCTSpecificationMaster")
                        .WithMany("LiquidPreparationSpecificationDetails")
                        .HasForeignKey("SpecificationLimitId");

                    b.Navigation("LiquidPreparation");

                    b.Navigation("QCTSpecificationMaster");
                });

            modelBuilder.Entity("Domain.Entities.PalletPacking", b =>
                {
                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("PalletPacking")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("PalletPacking")
                        .HasForeignKey("SAPProductionOrderId");

                    b.HasOne("Domain.Entities.User", "HeadUser")
                        .WithMany()
                        .HasForeignKey("SupervisedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadUser");

                    b.Navigation("ProductMaster");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("Domain.Entities.PalletPackingDetails", b =>
                {
                    b.HasOne("Domain.Entities.PalletPacking", "PalletPacking")
                        .WithMany("PalletPackingDetails")
                        .HasForeignKey("HeaderId");

                    b.Navigation("PalletPacking");
                });

            modelBuilder.Entity("Domain.Entities.PostCheckListDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.PostCheckListEntity", "PostCheckList")
                        .WithMany("PostCheckListDetails")
                        .HasForeignKey("PostCheckListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PrePostQuestionEntity", "PrePostQuestion")
                        .WithMany()
                        .HasForeignKey("PrePostQuestionId");

                    b.Navigation("PostCheckList");

                    b.Navigation("PrePostQuestion");
                });

            modelBuilder.Entity("Domain.Entities.PostCheckListEntity", b =>
                {
                    b.HasOne("Skyward.Model.MastersEntity", "Masters")
                        .WithMany("PostCheckListEntity")
                        .HasForeignKey("FillingLine");

                    b.HasOne("Domain.Entities.PrePostQuestionEntity", "PrePostQuestion")
                        .WithMany("PostCheckListDetails")
                        .HasForeignKey("PrePostQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("PostCheckListEntity")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Entities.ProductionOrder", null)
                        .WithMany("PostCheckListEntity")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany("PostCheckListEntity")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Masters");

                    b.Navigation("PrePostQuestion");

                    b.Navigation("ProductMaster");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("Domain.Entities.PreCheckListDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.PreCheckListEntity", "PreCheckList")
                        .WithMany("PreCheckListDetails")
                        .HasForeignKey("PreCheckListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PrePostQuestionEntity", "PrePostQuestion")
                        .WithMany()
                        .HasForeignKey("PrePostQuestionId");

                    b.Navigation("PreCheckList");

                    b.Navigation("PrePostQuestion");
                });

            modelBuilder.Entity("Domain.Entities.PreCheckListEntity", b =>
                {
                    b.HasOne("Skyward.Model.MastersEntity", "Masters")
                        .WithMany("PreCheckListEntity")
                        .HasForeignKey("FillingLine");

                    b.HasOne("Domain.Entities.PrePostQuestionEntity", "PrePostQuestion")
                        .WithMany("PreCheckList")
                        .HasForeignKey("PrePostQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("PreCheckListEntity")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Entities.ProductionOrder", null)
                        .WithMany("PreCheckListEntity")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany("PreCheckListEntity")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Masters");

                    b.Navigation("PrePostQuestion");

                    b.Navigation("ProductMaster");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("Domain.Entities.PrePostQuestionEntity", b =>
                {
                    b.HasOne("Domain.Entities.PostCheckListEntity", null)
                        .WithMany("PrePostQuestionEntity")
                        .HasForeignKey("PostCheckListEntityId");

                    b.HasOne("Domain.Entities.PreCheckListEntity", null)
                        .WithMany("PrePostQuestionEntity")
                        .HasForeignKey("PreCheckListEntityId");
                });

            modelBuilder.Entity("Domain.Entities.ProductInstructionDetails", b =>
                {
                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany()
                        .HasForeignKey("ProductMasterId");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("Domain.Entities.RolePermissionMap", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.TrailerInspection", b =>
                {
                    b.HasOne("Domain.Entities.CompanyMaster", "CompanyMaster")
                        .WithMany("TrailerInspection")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Skyward.Model.MastersEntity", "MasterEntity")
                        .WithMany("TrailerInspection")
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("CompanyMaster");

                    b.Navigation("MasterEntity");
                });

            modelBuilder.Entity("Domain.Entities.TrailerLoading", b =>
                {
                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId");

                    b.HasOne("Domain.Entities.User", "HeadUser")
                        .WithMany()
                        .HasForeignKey("SupervisedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadUser");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("Domain.Entities.TrailerLoadingDetails", b =>
                {
                    b.HasOne("Domain.Entities.TrailerLoading", "TrailerLoading")
                        .WithMany("TrailerLoadingDetails")
                        .HasForeignKey("HeaderId");

                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrderid")
                        .WithMany("TrailerLoadingDetails")
                        .HasForeignKey("ProductionOrder");

                    b.Navigation("ProductionOrderid");

                    b.Navigation("TrailerLoading");
                });

            modelBuilder.Entity("Domain.Entities.WeightCheck", b =>
                {
                    b.HasOne("Domain.Entities.ProductMaster", "ProductMaster")
                        .WithMany("WeightCheck")
                        .HasForeignKey("ProductId");

                    b.HasOne("Domain.Entities.ProductionOrder", "ProductionOrder")
                        .WithMany("WeightCheck")
                        .HasForeignKey("SAPProductionOrderId");

                    b.HasOne("Domain.Entities.ShiftMaster", "ShiftMaster")
                        .WithMany("WeightCheck")
                        .HasForeignKey("ShiftId");

                    b.Navigation("ProductMaster");

                    b.Navigation("ProductionOrder");

                    b.Navigation("ShiftMaster");
                });

            modelBuilder.Entity("Domain.Entities.WeightCheckDetails", b =>
                {
                    b.HasOne("Domain.Entities.WeightCheck", "WeightCheck")
                        .WithMany("WeightCheckDetails")
                        .HasForeignKey("HeaderId");

                    b.Navigation("WeightCheck");
                });

            modelBuilder.Entity("Domain.Entities.WeightCheckSubDetails", b =>
                {
                    b.HasOne("Domain.Entities.WeightCheckDetails", "WeightCheckDetails")
                        .WithMany("WeightCheckSubDetails")
                        .HasForeignKey("DetailId");

                    b.HasOne("Domain.Entities.NozzelMaster", "NozzelMaster")
                        .WithMany("WeightCheckSubDetails")
                        .HasForeignKey("NozzleId");

                    b.Navigation("NozzelMaster");

                    b.Navigation("WeightCheckDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AttributeCheck", b =>
                {
                    b.Navigation("AttributeCheckDetails");
                });

            modelBuilder.Entity("Domain.Entities.CompanyMaster", b =>
                {
                    b.Navigation("TrailerInspection");
                });

            modelBuilder.Entity("Domain.Entities.DowntimeTracking", b =>
                {
                    b.Navigation("CauseMaster");

                    b.Navigation("DownTimeTrackingDetails");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparation", b =>
                {
                    b.Navigation("LiquidPreparationAdjustmentDetails");

                    b.Navigation("LiquidPreparationChecklistDetails");

                    b.Navigation("LiquidPreparationInstructionDetails");

                    b.Navigation("LiquidPreparationSpecificationDetails");
                });

            modelBuilder.Entity("Domain.Entities.LiquidPreparationInstructionDetails", b =>
                {
                    b.Navigation("LiquidPreparationAdjustmentDetails");
                });

            modelBuilder.Entity("Domain.Entities.MaterialMaster", b =>
                {
                    b.Navigation("LiquidPreparationAdjustmentDetails");

                    b.Navigation("LiquidPreparationInstructionDetails");
                });

            modelBuilder.Entity("Domain.Entities.NozzelMaster", b =>
                {
                    b.Navigation("WeightCheckSubDetails");
                });

            modelBuilder.Entity("Domain.Entities.PalletPacking", b =>
                {
                    b.Navigation("PalletPackingDetails");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.PostCheckListEntity", b =>
                {
                    b.Navigation("PostCheckListDetails");

                    b.Navigation("PrePostQuestionEntity");
                });

            modelBuilder.Entity("Domain.Entities.PreCheckListEntity", b =>
                {
                    b.Navigation("PreCheckListDetails");

                    b.Navigation("PrePostQuestionEntity");
                });

            modelBuilder.Entity("Domain.Entities.PrePostQuestionEntity", b =>
                {
                    b.Navigation("PostCheckListDetails");

                    b.Navigation("PreCheckList");
                });

            modelBuilder.Entity("Domain.Entities.ProductInstructionDetails", b =>
                {
                    b.Navigation("LiquidPreparationInstructionDetails");
                });

            modelBuilder.Entity("Domain.Entities.ProductMaster", b =>
                {
                    b.Navigation("AttributeCheck");

                    b.Navigation("DowntimeTracking");

                    b.Navigation("LiquidPreparation");

                    b.Navigation("PalletPacking");

                    b.Navigation("PostCheckListEntity");

                    b.Navigation("PreCheckListEntity");

                    b.Navigation("WeightCheck");
                });

            modelBuilder.Entity("Domain.Entities.ProductionOrder", b =>
                {
                    b.Navigation("AttributeCheck");

                    b.Navigation("DowntimeTracking");

                    b.Navigation("LiquidPreparation");

                    b.Navigation("PalletPacking");

                    b.Navigation("PostCheckListEntity");

                    b.Navigation("PreCheckListEntity");

                    b.Navigation("TrailerLoadingDetails");

                    b.Navigation("WeightCheck");
                });

            modelBuilder.Entity("Domain.Entities.QCTSpecificationMaster", b =>
                {
                    b.Navigation("LiquidPreparationSpecificationDetails");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.ShiftMaster", b =>
                {
                    b.Navigation("LiquidPreparation");

                    b.Navigation("PostCheckListEntity");

                    b.Navigation("PreCheckListEntity");

                    b.Navigation("WeightCheck");
                });

            modelBuilder.Entity("Domain.Entities.StartEndBatchChecklist", b =>
                {
                    b.Navigation("LiquidPreparationChecklistDetails");
                });

            modelBuilder.Entity("Domain.Entities.TankMaster", b =>
                {
                    b.Navigation("LiquidPreparation");

                    b.Navigation("LiquidPreparationChecklistDetails");
                });

            modelBuilder.Entity("Domain.Entities.TrailerLoading", b =>
                {
                    b.Navigation("TrailerLoadingDetails");
                });

            modelBuilder.Entity("Domain.Entities.WeightCheck", b =>
                {
                    b.Navigation("WeightCheckDetails");
                });

            modelBuilder.Entity("Domain.Entities.WeightCheckDetails", b =>
                {
                    b.Navigation("WeightCheckSubDetails");
                });

            modelBuilder.Entity("Skyward.Model.MastersEntity", b =>
                {
                    b.Navigation("DowntimeTracking");

                    b.Navigation("PostCheckListEntity");

                    b.Navigation("PreCheckListEntity");

                    b.Navigation("TrailerInspection");
                });
#pragma warning restore 612, 618
        }
    }
}
